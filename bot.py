import psycopg2
import telebot
from telebot import types
from helper import *
import telebot
import config
import datetime
import pytz
import json
import traceback
import schedule
import requests
import re
import credentials
import config
import logging
import cherrypy

import flask

connection = psycopg2.connect(user="galina_semenovna",
                              password="mitina777",
                              host="localhost",
                              database="bot_database")
cursor = connection.cursor()
cursor.execute(f"CREATE TABLE IF NOT EXISTS chat_test_second (id SERIAL PRIMARY KEY, name VARCHAR NOT NULL,"
               f" chat_id INT NOT NULL, chat_login VARCHAR NOT NULL, position VARCHAR, mailing BOOL,"
               f" city VARCHAR, lat FLOAT, lon FLOAT)")
connection.commit()

WEBHOOK_HOST = '104.248.133.84'
WEBHOOK_PORT = 443  # 443, 80, 88 –∏–ª–∏ 8443 (–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç!)
WEBHOOK_LISTEN = '104.248.133.84'  # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –ø—Ä–∏–¥–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫–æ–π –∂–µ IP, —á—Ç–æ –∏ –≤—ã—à–µ

WEBHOOK_SSL_CERT = './webhook_cert.pem'  # –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % (config.TOKEN)

bot = telebot.TeleBot(config.TOKEN)


class WebhookServer(object):
    @cherrypy.expose
    def index(self):
        if 'content-length' in cherrypy.request.headers and \
                'content-type' in cherrypy.request.headers and \
                cherrypy.request.headers['content-type'] == 'application/json':
            length = int(cherrypy.request.headers['content-length'])
            json_string = cherrypy.request.body.read(length).decode("utf-8")
            update = telebot.types.Update.de_json(json_string)
            # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.process_new_updates([update])
            return ''
        else:
            raise cherrypy.HTTPError(403)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def start_command(message):
    main_menu(message, True)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def text(message):
    c_id = chat_id(message)
    if message.text == '/reg':
        start_of_registration(message)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–µ–æ –º–µ–Ω—é', callback_data='main_menu'))
        bot.send_message(c_id, text="ü§∑üèº –ë–æ—Ç –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª", reply_markup=keyboard)
        c = get_chat(c_id)
        send_error(f"ü§∑üèø‚Äç‚ôÇÔ∏è –ë–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c[1]}, {c[2]}")


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    c_id = chat_id(call)
    data = call.data
    if data == "look_course":
        look_course(call)
    elif data == "start_reg":
        start_of_registration(call.message)
    elif data.startswith('get-'):
        get_course(call)
    elif data.startswith('weather-'):
        get_weather(call.message, call)
    elif call.data == "mailing_false":
        mailing_false(call)
    elif call.data == "mailing_true":
        mailing_true(call)
    elif call.data == "mailing_refuse":
        mailing_refuse(call)
    elif call.data == "main_menu":
        main_menu(call.message, False)
    elif call.data == "account":
        account(call.message)
    elif call.data == "new_city":
        c_id = chat_id(call)
        bot.edit_message_text("üåÉ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞ —Å–æ–±–æ–π üåÉ", c_id, call.message.id)
        bot.register_next_step_handler(call.message, set_new_city_func)
    elif call.data == "look_weather_main":
        c_id = chat_id(call)
        keyboard = types.InlineKeyboardMarkup()
        _chat = get_chat(c_id)
        if _chat[6] is not None:
            keyboard.add(
                types.InlineKeyboardButton(text='üåá –£ —Å–µ–±—è –≤ –≥–æ—Ä–æ–¥–µ üåá', callback_data=f'weather-{_chat[6]}'))
            keyboard.add(
                types.InlineKeyboardButton(text='üèô –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ üèô', callback_data='look_weather_name'))
            keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='main_menu'))
            bot.edit_message_text("üå§ –í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É", c_id, call.message.id,
                                  reply_markup=keyboard)
        else:
            c_id = chat_id(call)
            bot.edit_message_text("üå§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", c_id,
                                  call.message.id)
            bot.register_next_step_handler(call.message, get_weather)
    elif call.data == "look_weather_name":
        c_id = chat_id(call)
        bot.edit_message_text("üå§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", c_id, call.message.id)
        bot.register_next_step_handler(call.message, get_weather)
    elif call.data == "change_name":
        bot.edit_message_text("ü§ö –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", c_id, call.message.id)
        bot.register_next_step_handler(call.message, set_new_name)
    elif call.data == "name_no":
        bot.send_message(c_id, "‚ùì –•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç ?")
        bot.register_next_step_handler(call.message, set_name)
    elif call.data == "admin_panel":
        admin_panel(call)
    elif call.data == "mailing":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        bot.edit_message_text(
            "üì£ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç <b>–ú–û–ú–ï–ù–¢–ê–õ–¨–ù–û</b> —Ä–∞–∑–æ—Å–ª–∞–Ω –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —É "
            "–∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ —Ä—ã—Å—Å—ã–ª–∫–∞?", c_id, call.message.id, parse_mode="HTML",
            reply_markup=keyboard)
        bot.register_next_step_handler(call.message, mailing)
    elif call.data == "statistic":
        statistic(call)


def set_new_city_func(message):
    c_id = chat_id(message)
    _res = find_weather_now(message.text)
    bot.delete_message(c_id, message.id)
    if _res['error']:
        error_worker(c_id, message, _res)
    else:
        if _res['temp'] > 0:
            _weather_smile = "‚òÄÔ∏è"
        else:
            _weather_smile = "‚ùÑÔ∏è"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        set_new_city_db(c_id, message.text)
        bot.send_message(c_id, text=f"üåá –û—Ç–ª–∏—á–Ω–æ, –≥–æ—Ä–æ–¥ {message.text} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏. üåá\n"
                                    f"{_weather_smile} –ö—Å—Ç–∞—Ç–∏, —Ç–∞–º —Å–µ–π—á–∞—Å {_res['temp']} –≥—Ä–∞–¥—É—Å–æ–≤ –∏ "
                                    f"{config.get_weather_desription_by_id(_res['weather'][0])}.",
                         reply_markup=keyboard)


def get_weather(message, call=None):
    c_id = chat_id(message)
    if call is not None:
        _data = call.data
        res = find_weather_now(_data[8:])
    else:
        res = find_weather_now(message.text)
    c = get_chat(c_id)
    if res['error']:
        error_worker(c_id, message, res)
    else:
        if res['temp'] > 0:
            _weather_smile = "‚òÄÔ∏è"
        else:
            _weather_smile = "‚ùÑÔ∏è"
        _weather_text = ""
        if len(res['weather']) == 1:
            _weather_text = f"<b>{config.get_weather_desription_by_id(res['weather'][0])}</b>"
        else:
            _weather_text = "üå§ –ü–æ–≥–æ–¥–∞:"
            for i in res['weather']:
                _weather_text += f"\n<b>{config.get_weather_desription_by_id(i)}</b>"
        if res['districts'][0] == res['districts'][1]:
            _district_text = ""
        else:
            _district_text = f"\nüå° –ú–µ—Å—Ç–∞–º–∏ —Ç–µ–º–ø–µ—Ä–µ—Ç—É—Ä–∞ –æ—Ç <b>{res['districts'][0]} –¥–æ {res['districts'][1]}</b>"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data=f'weather-{res["city"]}'))
        keyboard.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', callback_data=f'main_menu'))
        _text = f"üåá –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ <b>{res['city']}</b>" \
                f"\n{_weather_smile} <b>{res['temp']}</b> –≥—Ä–∞–¥—É—Å–æ–≤ (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ <b>{res['feels']}</b>)" \
                f"{_district_text}" \
                f"\n{_weather_text}" \
                f"\nüí® –í–µ—Ç–µ—Ä: <b>{res['wind']}</b> –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É" \
                f"\nüí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{res['humidity']}</b> –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤" \
                f"\nüå• –û–±–ª–∞—á–Ω–æ—Å—Ç—å: <b>{res['clouds']}</b> –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤" \
                f"\nüëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: <b>{res['visibility']}</b> –º–µ—Ç—Ä–æ–≤" \
                f"\nüåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞ –≤ <b>{res['sunrise']}</b>" \
                f"\nüåÑ –ó–∞–∫–∞—Ç –≤ <b>{res['sunset']}</b>" \
                f"\n\n‚è± <i>–î–∞–Ω–Ω—ã–µ –Ω–∞ {get_time()}</i>"
        if call is not None:
            bot.edit_message_text(_text, c_id, message.id, reply_markup=keyboard, parse_mode="HTML")
        else:
            bot.delete_message(c_id, message.id)
            bot.send_message(c_id, text=_text, reply_markup=keyboard, parse_mode="HTML")
        send_error(f"üå™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c[1]}, {c[2]} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø–æ–≥–æ–¥—É –≤ {res['city']}")


def look_weather(message):
    c_id = chat_id(message)
    _res = find_weather_now(message.text)
    if _res['error']:
        error_worker(c_id, message, _res)
    else:
        bot.delete_message(c_id, message.id)
        bot.send_message(c_id, f"üåÜ –û—Ç–ª–∏—á–Ω–æ, {message.text} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–º!")


def error_worker(c_id, message, _res):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è', callback_data=f'main_menu'))
    c = get_chat(c_id)
    if _res["message"] == "city not found":
        bot.delete_message(c_id, message.id)
        msg = bot.send_message(c_id, "ü§∑üèº –î–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§∑üèº",
                               reply_markup=keyboard)
    else:
        bot.delete_message(c_id, message.id)
        msg = bot.send_message(c_id,
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–∂–µ. –°–æ–æ–±—â–µ–Ω–∏ –æ—à–∏–±–∫–∏ {_res['message']}."
                               f" –ù–∞–º —É–∂–µ –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.",
                               reply_markup=keyboard)
    bot.register_next_step_handler(msg, look_weather)
    send_error(f"üÜò –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c[1]}, {c[2]} —É–ø–∞–ª–∞ –æ—à–∏–±–∫–∞ {_res}")


bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                certificate=open(WEBHOOK_SSL_CERT, 'r'))
cherrypy.config.update({
    'server.socket_host': WEBHOOK_LISTEN,
    'server.socket_port': WEBHOOK_PORT,
    'server.ssl_module': 'builtin',
    'server.ssl_certificate': WEBHOOK_SSL_CERT,
    'server.ssl_private_key': WEBHOOK_SSL_PRIV
})
cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})

schedule.every().minute.do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
